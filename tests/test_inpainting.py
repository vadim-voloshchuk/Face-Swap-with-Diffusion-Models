import os
import pytest
import cv2
import numpy as np
from PIL import Image, ImageDraw, ImageFont
from diffusers import DiffusionPipeline
from modules.inpainting import run_inpainting

# üîπ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "inpaint" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–∏–∑ diffusers)
def get_available_inpaint_models():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç diffusers –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è inpainting."""
    all_models = [
        "runwayml/stable-diffusion-inpainting",
        "diffusers/stable-diffusion-xl-1.0-inpainting-0.1",
        "kandinsky-community/kandinsky-2-2-decoder-inpaint",
        "stabilityai/stable-diffusion-2-inpainting",
        "saik0s/realistic_vision_inpainting",
        "Lykon/dreamshaper-8-inpainting"
    ]
    
    available_models = []
    for model in all_models:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ pipeline –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
            pipe = DiffusionPipeline.from_pretrained(model)
            if "inpaint" in model.lower():
                available_models.append(model)
        except:
            print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å.")
    
    return available_models

# üîπ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
MODEL_LIST = get_available_inpaint_models()

# üîπ –†–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
PARAMS_LIST = [
    {"strength": 0.3, "guidance_scale": 7.5, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.2},
    {"strength": 0.7, "guidance_scale": 12.0, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.2},
    {"strength": 0.75, "guidance_scale": 7.5, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.2},
    {"strength": 0.9, "guidance_scale": 10.0, "use_blending": False, "use_face_restoration": True, "restoration_strength": 0.7, "mask_scale_factor": 1.5},
    {"strength": 1.0, "guidance_scale": 6.0, "use_blending": False, "use_face_restoration": True, "restoration_strength": 0.5, "mask_scale_factor": 1.3},
    {"strength": 0.85, "guidance_scale": 8.0, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.4}
]

# üîπ –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
TARGET_IMAGE_PATH = "data/target/IMG_9240.jpg"
REFERENCE_IMAGE_PATH = "data/glam_test_task_data (2)/IMG_0738.jpg"

# üîπ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
RESULTS_DIR = "tests/results"
os.makedirs(RESULTS_DIR, exist_ok=True)

@pytest.mark.parametrize("model_name", MODEL_LIST)
@pytest.mark.parametrize("params", PARAMS_LIST)
def test_inpainting(model_name, params):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç inpainting –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    
    target_img = Image.open(TARGET_IMAGE_PATH).convert("RGB")
    ref_img = Image.open(REFERENCE_IMAGE_PATH).convert("RGB")
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏
    model_dir = os.path.join(RESULTS_DIR, model_name.replace("/", "_"))
    os.makedirs(model_dir, exist_ok=True)

    # –ó–∞–ø—É—Å–∫ inpainting
    result = run_inpainting(
        target_img, ref_img, model_name=model_name, steps=20, padding_mask_crop=0, **params
    )

    if isinstance(result, np.ndarray):
        result = Image.fromarray(result)
        
    assert result is not None, f"Inpainting –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–æ–¥–µ–ª—å: {model_name})"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    filename = f"s{params['strength']}_g{params['guidance_scale']}.jpg"
    result_path = os.path.join(model_dir, filename)
    result.save(result_path)
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result_path}")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º pytest
    pytest.main(["-v", __file__])
