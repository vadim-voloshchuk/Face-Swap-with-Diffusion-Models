import os
from PIL import Image, ImageDraw, ImageFont
from diffusers import DiffusionPipeline

def get_available_inpaint_models():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç diffusers –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è inpainting."""
    all_models = [
        "runwayml/stable-diffusion-inpainting",
        "diffusers/stable-diffusion-xl-1.0-inpainting-0.1",
        "kandinsky-community/kandinsky-2-2-decoder-inpaint",
        "stabilityai/stable-diffusion-2-inpainting",
        "saik0s/realistic_vision_inpainting",
        "Lykon/dreamshaper-8-inpainting"
    ]
    
    available_models = []
    for model in all_models:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ pipeline –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
            pipe = DiffusionPipeline.from_pretrained(model)
            if "inpaint" in model.lower():
                available_models.append(model)
        except:
            print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å.")
    
    return available_models

# üîπ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
MODEL_LIST = get_available_inpaint_models()

# üîπ –†–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
PARAMS_LIST = [
    {"strength": 0.3, "guidance_scale": 7.5, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.2},
    {"strength": 0.7, "guidance_scale": 12.0, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.2},
    {"strength": 0.75, "guidance_scale": 7.5, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.2},
    {"strength": 0.9, "guidance_scale": 10.0, "use_blending": False, "use_face_restoration": True, "restoration_strength": 0.7, "mask_scale_factor": 1.5},
    {"strength": 1.0, "guidance_scale": 6.0, "use_blending": False, "use_face_restoration": True, "restoration_strength": 0.5, "mask_scale_factor": 1.3},
    {"strength": 0.85, "guidance_scale": 8.0, "use_blending": False, "use_face_restoration": False, "mask_scale_factor": 1.4}
]

# üîπ –ü—É—Ç–∏ –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
TARGET_IMAGE_PATH = "data/target/IMG_9240.jpg"
REFERENCE_IMAGE_PATH = "data/glam_test_task_data (2)/IMG_0738.jpg"

# üîπ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
RESULTS_DIR = "tests/results"
def create_comparison_images():
    """–°–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏."""
    FONT_SIZE = 48
    try:
        font = ImageFont.truetype("arial.ttf", FONT_SIZE)  # –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–∂–Ω—ã–π —à—Ä–∏—Ñ—Ç
    except Exception:
        font = ImageFont.load_default(size=FONT_SIZE)

    for model in MODEL_LIST:
        model_dir = os.path.join(RESULTS_DIR, model.replace("/", "_"))
        if not os.path.isdir(model_dir):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {model_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ {model}!")
            continue

        result_files = sorted([f for f in os.listdir(model_dir) if f.endswith(".jpg")])
        
        if not result_files:
            print(f"‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è {model}!")
            continue
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        min_w, min_h = float('inf'), float('inf')
        images = {}
        for filename in result_files:
            img = Image.open(os.path.join(model_dir, filename))
            images[filename] = img
            min_w, min_h = min(min_w, img.width), min(min_h, img.height)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
        for filename, img in images.items():
            img.thumbnail((min_w, min_h), Image.LANCZOS)
            images[filename] = img

        # –†–∞—Å—á—ë—Ç –æ—Ç—Å—Ç—É–ø–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞
        spacing = int(FONT_SIZE * 3)
        title_height = int(FONT_SIZE * 10)
        label_offset = int(FONT_SIZE * 6)

        # –†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cols = len(PARAMS_LIST)
        big_img_w = cols * min_w + (cols + 1) * spacing
        big_img_h = min_h + title_height + label_offset

        big_image = Image.new("RGB", (big_img_w, big_img_h), "white")
        draw = ImageDraw.Draw(big_image)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_text = f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model}"
        draw.text((big_img_w // 2 - len(title_text) * 12, FONT_SIZE // 2), title_text, fill="black", font=font)

        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö
        x_offset = spacing
        y_offset = title_height
        for param in PARAMS_LIST:
            filename = f"s{param['strength']}_g{param['guidance_scale']}.jpg"
            if filename in images:
                big_image.paste(images[filename], (x_offset, y_offset))
                param_text = (
                    f"Strength: {param['strength']}, Guidance: {param['guidance_scale']}\n"
                    f"Face Restoration: {param['use_face_restoration']}, "
                    f"Restoration Strength: {param.get('restoration_strength', 'N/A')}\n"
                    f"Mask Scale Factor: {param['mask_scale_factor']}"
                )
                draw.text((x_offset + 10, y_offset - label_offset), param_text, fill="black", font=font)
            else:
                print(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {model_dir}!")
            x_offset += min_w + spacing

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        comparison_path = os.path.join(model_dir, "comparison.jpg")
        big_image.save(comparison_path)
        print(f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {comparison_path}")

if __name__ == '__main__':
    create_comparison_images()
